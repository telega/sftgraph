var t,n;t=this,n=function(t,n,i){function u(t,n){for(var i=0;i<n.length;i++){var u=n[i];u.enumerable=u.enumerable||!1,u.configurable=!0,"value"in u&&(u.writable=!0),Object.defineProperty(t,u.key,u)}}function r(t,n,i){return n&&u(t.prototype,n),i&&u(t,i),t}var e=function(){function t(t){this.t=void 0,this.nodeData=void 0,this.t=new n.ObjectId,this.nodeData=t}return r(t,[{key:"id",get:function(){return this.t.toHexString()}},{key:"data",get:function(){return this.nodeData},set:function(t){this.nodeData=t}}]),t}(),o=function(){function t(){var t=this;this.map=void 0,this.has=function(n){return t.map.has(n)},this.hasNode=function(n){return t.has(n.t)},this.add=function(n,i){return t.map.set(n,i)},this.addNode=function(n){return!t.hasNode(n)&&t.add(n.t,n)},this.getNodeById=function(n){return t.map.get(n)},this.values=function(){return t.map.values()},this.entries=function(){return t.map.entries()},this.clear=function(){return t.map.clear()},this.map=new Map}return r(t,[{key:"size",get:function(){return this.map.size}}]),t}(),s=function(){function t(t){var n=this;this.map=new Map,this.clear=function(){return n.map.clear()},this.entries=function(){return n.map.entries()},this.get=function(t){return n.map.get(t)},this.getEdge=function(t){return n.get(t.t)},this.has=function(t){return n.map.has(t)},this.hasEdge=function(t){return n.has(t.t)},this.forEach=function(t,i){return n.map.forEach(t,i)},this.values=function(){return n.map.values()},this.set=function(t,i){return n.map.set(t,i)},this.setEdge=function(t){return n.set(t.t,t)},this.getEdgesByTargetNodeId=function(t){return new Set(i.filter(Object.fromEntries(n.map),(function(n){return n.nodeId.equals(t)})))},this.removeEdgesByTargetNodeId=function(t){return n.removeEdges(n.getEdgesByTargetNodeId(t))},this.removeEdges=function(t){return t.forEach((function(t){return n.removeEdgeById(t.t)}))},this.removeEdgeById=function(t){return n.map.delete(t)},this.hasEdgeToTargetNodeId=function(t){return n.getEdgesByTargetNodeId(t).size>0},this.hasEdgeToTargetNode=function(t){return n.hasEdgeToTargetNodeId(t.t)},this.map=t?new Map([[t.t,t]]):new Map}return r(t,[{key:"size",get:function(){return this.map.size}},{key:"length",get:function(){return this.map.size}}]),t}(),h=function(){function t(t,i){this.t=void 0,this.edgeData=void 0,this.targetNode=void 0,this.t=new n.ObjectId,this.edgeData=i,this.targetNode=t}return r(t,[{key:"id",get:function(){return this.t.toHexString()}},{key:"data",get:function(){return this.edgeData},set:function(t){this.edgeData=t}},{key:"node",get:function(){return this.targetNode}},{key:"nodeId",get:function(){return this.targetNode.t}},{key:"weight",get:function(){return this.edgeData.weight},set:function(t){this.edgeData.weight=t}}]),t}(),f=function(){function t(t){var n=this;void 0===t&&(t=new Map),this.map=void 0,this.has=function(t){return n.map.has(t)},this.hasNode=function(t){return n.has(t.t)},this.addNode=function(t){return!n.hasNode(t)&&n.map.set(t.t,new s)},this.hasEdge=function(t,i){return n.hasNode(t)&&n.map.get(t.t).hasEdgeToTargetNode(i)},this.addEdge=function(t,i,u){return n.addBiEdge(t,i,u)},this.addBiEdge=function(t,i,u){return n.addDiEdge(t,i,u)&&n.addDiEdge(i,t,u)},this.addDiEdge=function(t,i,u){return n.createMissingNodes(t,i)&&n.map.get(t.t).setEdge(new h(i,u))},this.createMissingNodes=function(t,i){return n.hasSourceAndTarget(t.t,i.t)||n.addMissingNodes(t,i)},this.addMissingNodes=function(t,i){!n.has(t.t)&&n.addNode(t),!n.has(i.t)&&n.addNode(i)},this.hasSourceAndTarget=function(t,i){return n.has(t)&&n.has(i)},this.getEdgeMap=function(t){return n.map.get(t)},this.getEdgeMapByNode=function(t){return n.getEdgeMap(t.t)},this.values=function(){return n.map.values()},this.entries=function(){return n.map.entries()},this.clear=function(){return n.map.clear()},this.removeNode=function(t){return n.removeNodeById(t.t)},this.removeNodeById=function(t){return n.has(t)&&n.map.delete(t)&&n.map.forEach((function(n){return n.removeEdgesByTargetNodeId(t)}))},this.map=new Map,t.forEach(this.addNode)}return r(t,[{key:"size",get:function(){return this.map.size}}]),t}(),c=function(){function t(t){var i=this;this.t=void 0,this.nodeMap=void 0,this.adjacencyMap=void 0,this.metaData=void 0,this.addNode=function(t){return i.nodeMap.addNode(t),i.adjacencyMap.addNode(t),t},this.addNodes=function(t){return t.forEach((function(t){return i.addNode(t)}))},this.addNewNode=function(t){return i.addNode(new e(t))},this.addEdge=function(t,n,u){return i.createMissingNodes(t,n)&&i.adjacencyMap.addEdge(t,n,u)},this.addBiEdge=function(t,n,u){return i.addEdge(t,n,u)},this.addDiEdge=function(t,n,u){return i.createMissingNodes(t,n)&&i.adjacencyMap.addDiEdge(t,n,u)},this.createMissingNodes=function(t,n){return i.hasSourceAndTargetNodes(t,n)||i.addMissingNodes(t,n)},this.addMissingNodes=function(t,n){!i.hasNode(t)&&i.addNode(t),!i.hasNode(n)&&i.addNode(n)},this.hasSourceAndTargetNodes=function(t,n){return i.hasNode(t)&&i.hasNode(n)},this.hasNode=function(t){return i.nodeMap.hasNode(t)},this.t=new n.ObjectId,this.nodeMap=new o,this.adjacencyMap=new f,this.metaData=t}return t.prototype.getNodeById=function(t){return this.nodeMap.getNodeById(t)},r(t,[{key:"nodes",get:function(){return this.nodeMap.entries()}},{key:"nodeValues",get:function(){return this.nodeMap.values()}},{key:"size",get:function(){return this.nodeMap.size}},{key:"edgeCount",get:function(){return this.adjacencyMap.size}}]),t}();t.AdjacencyMap=f,t.Edge=h,t.EdgeMap=s,t.Graph=c,t.Node=e,t.NodeMap=o},"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("bson"),require("lodash")):"function"==typeof define&&define.amd?define(["exports","bson","lodash"],n):n((t=t||self).sftgraph={},t.bson,t.i);
//# sourceMappingURL=index.js.map
