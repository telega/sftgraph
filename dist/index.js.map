{"version":3,"file":"index.js","sources":["../src/classes/Node.ts","../src/classes/NodeMap.ts","../src/classes/EdgeMap.ts","../src/classes/Edge.ts","../src/classes/AdjacencyMap.ts","../src/classes/Graph.ts"],"sourcesContent":["import { ObjectId } from 'bson'\nimport { WithId } from '../interfaces/WithId'\n\nexport class Node<T> implements WithId {\n  public readonly _id: ObjectId\n  private nodeData: T\n  constructor(data: T) {\n    this._id = new ObjectId()\n    this.nodeData = data\n  }\n\n  get id() {\n    return this._id.toHexString()\n  }\n\n  get data() {\n    return this.nodeData\n  }\n\n  set data(data: T) {\n    this.nodeData = data\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Node } from './Node'\n\nexport class NodeMap<ND> {\n  public map: Map<ObjectId, Node<ND>>\n\n  constructor() {\n    this.map = new Map<ObjectId, Node<ND>>()\n  }\n\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasNode = (node: Node<ND>) => this.has(node._id)\n\n  public add = (id: ObjectId, node: Node<ND>) => this.map.set(id, node)\n  public addNode = (node: Node<ND>) => !this.hasNode(node) && this.add(node._id, node)\n\n  public getNodeById = (id: ObjectId) => this.map.get(id)\n\n  public values = () => this.map.values()\n  public entries = () => this.map.entries()\n  public clear = () => this.map.clear()\n\n  public get size() {\n    return this.map.size\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Edge } from './Edge'\nimport { Node } from './Node'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport * as _ from 'lodash'\nexport class EdgeMap<ND, ED extends WithWeight> {\n  private map: Map<ObjectId, Edge<ND, ED>> = new Map()\n\n  constructor(edge?: Edge<ND, ED>) {\n    this.map = edge ? new Map<ObjectId, Edge<ND, ED>>([[edge._id, edge]]) : new Map<ObjectId, Edge<ND, ED>>()\n  }\n  get size() {\n    return this.map.size\n  }\n  get length() {\n    return this.map.size\n  }\n  public clear = () => this.map.clear()\n  public entries = () => this.map.entries()\n  public get = (id: ObjectId) => this.map.get(id)\n  public getEdge = ({ _id }: Edge<ND, ED>) => this.get(_id)\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasEdge = ({ _id }: Edge<ND, ED>) => this.has(_id)\n  public forEach = (\n    callbackFn: (value: Edge<ND, ED>, key: ObjectId, map: Map<ObjectId, Edge<ND, ED>>) => void,\n    thisArg?: any\n  ) => this.map.forEach(callbackFn, thisArg)\n  public values = () => this.map.values()\n  public set = (key: ObjectId, value: Edge<ND, ED>) => this.map.set(key, value)\n  public setEdge = (edge: Edge<ND, ED>) => this.set(edge._id, edge)\n\n  public getEdgesByTargetNodeId = (id: ObjectId) =>\n    new Set<Edge<ND, ED>>(_.filter(Object.fromEntries(this.map), (edge: Edge<ND, ED>) => edge.nodeId.equals(id)))\n\n  public removeEdgesByTargetNodeId = (id: ObjectId) => this.removeEdges(this.getEdgesByTargetNodeId(id))\n\n  public removeEdges = (edges: Set<Edge<ND, ED>>) => edges.forEach(({ _id }: Edge<ND, ED>) => this.removeEdgeById(_id))\n  public removeEdgeById = (id: ObjectId) => this.map.delete(id)\n\n  public hasEdgeToTargetNodeId = (id: ObjectId) => this.getEdgesByTargetNodeId(id).size > 0\n  public hasEdgeToTargetNode = ({ _id }: Node<ND>) => this.hasEdgeToTargetNodeId(_id)\n\n  public getTargetNodes = () => Array.from(this.values()).map(edge => edge.targetNode)\n}\n","import { ObjectId } from 'bson'\nimport { WithId } from '../interfaces/WithId'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { Node } from './Node'\n\nexport class Edge<N, D extends WithWeight> implements WithId {\n  public readonly _id: ObjectId\n  public edgeData: D\n  public targetNode: Node<N>\n\n  constructor(node: Node<N>, data: D) {\n    this._id = new ObjectId()\n    this.edgeData = data\n    this.targetNode = node\n  }\n\n  get id() {\n    return this._id.toHexString()\n  }\n\n  get data() {\n    return this.edgeData\n  }\n\n  set data(data: D) {\n    this.edgeData = data\n  }\n\n  get node() {\n    return this.targetNode\n  }\n\n  get nodeId() {\n    return this.targetNode._id\n  }\n\n  get weight() {\n    return this.edgeData.weight\n  }\n\n  set weight(weight: number) {\n    this.edgeData.weight = weight\n  }\n}\n","import { ObjectId } from 'bson'\nimport { EdgeMap } from './EdgeMap'\nimport { Node } from './Node'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { Edge } from './Edge'\n\nexport class AdjacencyMap<ND, ED extends WithWeight> {\n  public map: Map<ObjectId, EdgeMap<ND, ED>>\n\n  constructor(nodeMap: Map<ObjectId, Node<ND>> = new Map<ObjectId, Node<ND>>()) {\n    this.map = new Map<ObjectId, EdgeMap<ND, ED>>()\n    nodeMap.forEach(this.addNode)\n  }\n\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasNode = (node: Node<ND>) => this.has(node._id)\n  public addNode = (node: Node<ND>) => !this.hasNode(node) && this.map.set(node._id, new EdgeMap<ND, ED>())\n\n  public hasEdge = (source: Node<ND>, target: Node<ND>) =>\n    this.hasNode(source) && this.map.get(source._id).hasEdgeToTargetNode(target)\n\n  /** shorthand for add BiEdge */\n  public addEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) => this.addBiEdge(source, target, edgeData)\n  public addBiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.addDiEdge(source, target, edgeData) && this.addDiEdge(target, source, edgeData)\n  public addDiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.map.get(source._id).setEdge(new Edge(target, edgeData))\n\n  private createMissingNodes = (source: Node<ND>, target: Node<ND>) =>\n    this.hasSourceAndTarget(source._id, target._id) || this.addMissingNodes(source, target)\n\n  private addMissingNodes = (source: Node<ND>, target: Node<ND>) => {\n    !this.has(source._id) && this.addNode(source)\n    !this.has(target._id) && this.addNode(target)\n  }\n\n  private hasSourceAndTarget = (source: ObjectId, target: ObjectId) => this.has(source) && this.has(target)\n\n  public getEdgeMap = (id: ObjectId) => this.map.get(id)\n  public getEdgeMapByNode = (node: Node<ND>) => this.getEdgeMap(node._id)\n\n  public values = () => this.map.values()\n  public entries = () => this.map.entries()\n  public clear = () => this.map.clear()\n\n  public removeNode = ({ _id }: Node<ND>) => this.removeNodeById(_id)\n  public removeNodeById = (id: ObjectId) =>\n    this.has(id) && this.map.delete(id) && this.map.forEach(edgeMap => edgeMap.removeEdgesByTargetNodeId(id))\n\n  get size() {\n    return this.map.size\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Edge } from './Edge'\nimport { Node } from './Node'\nimport { EdgeMap } from './EdgeMap'\nimport { WithId } from '../interfaces/WithId'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { NodeMap } from './NodeMap'\nimport { AdjacencyMap } from './AdjacencyMap'\nexport class Graph<GD, ND, ED extends WithWeight> implements WithId {\n  readonly _id: ObjectId\n  public nodeMap: NodeMap<ND>\n  public adjacencyMap: AdjacencyMap<ND, ED>\n  public metaData: GD\n\n  constructor(metaData?: GD) {\n    this._id = new ObjectId()\n    this.nodeMap = new NodeMap<ND>()\n    this.adjacencyMap = new AdjacencyMap<ND, ED>()\n    this.metaData = metaData\n  }\n\n  public addNode = (node: Node<ND>) => {\n    this.nodeMap.addNode(node)\n    this.adjacencyMap.addNode(node)\n    return node\n  }\n\n  public addNodes = (nodes: Array<Node<ND>>) => nodes.forEach(node => this.addNode(node))\n\n  public addNewNode = (nodeData: ND) => this.addNode(new Node(nodeData))\n\n  public addEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.adjacencyMap.addEdge(source, target, edgeData)\n\n  public addBiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) => this.addEdge(source, target, edgeData)\n\n  public addDiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.adjacencyMap.addDiEdge(source, target, edgeData)\n\n  private createMissingNodes = (source: Node<ND>, target: Node<ND>) =>\n    this.hasSourceAndTargetNodes(source, target) || this.addMissingNodes(source, target)\n\n  private addMissingNodes = (source: Node<ND>, target: Node<ND>) => {\n    !this.hasNode(source) && this.addNode(source)\n    !this.hasNode(target) && this.addNode(target)\n  }\n  private hasSourceAndTargetNodes = (source: Node<ND>, target: Node<ND>) => this.hasNode(source) && this.hasNode(target)\n  public hasNode = (node: Node<ND>) => this.nodeMap.hasNode(node)\n\n  get nodes() {\n    return this.nodeMap.entries()\n  }\n\n  get nodeValues() {\n    return this.nodeMap.values()\n  }\n\n  get size() {\n    return this.nodeMap.size\n  }\n\n  get edgeCount() {\n    return this.adjacencyMap.size\n  }\n\n  getNodeById(id: ObjectId) {\n    return this.nodeMap.getNodeById(id)\n  }\n\n  getEdgeMapById(id: ObjectId) {\n    return this.adjacencyMap.has(id) && this.adjacencyMap.getEdgeMap(id)\n  }\n\n  getEdgeMapByNode(node: Node<ND>) {\n    return this.adjacencyMap.hasNode(node) && this.adjacencyMap.getEdgeMapByNode(node)\n  }\n\n  getNeighborsById = (id: ObjectId) => this.getEdgeMapById(id).getTargetNodes()\n  getNeighborsByNode = (node: Node<ND>) => this.getNeighborsById(node._id)\n}\n"],"names":["Node","data","_id","nodeData","ObjectId","this","toHexString","NodeMap","map","has","id","_this","hasNode","node","add","set","addNode","getNodeById","get","values","entries","clear","Map","size","EdgeMap","edge","getEdge","hasEdge","forEach","callbackFn","thisArg","key","value","setEdge","getEdgesByTargetNodeId","Set","_","Object","fromEntries","nodeId","equals","removeEdgesByTargetNodeId","removeEdges","edges","removeEdgeById","delete","hasEdgeToTargetNodeId","hasEdgeToTargetNode","getTargetNodes","Array","from","targetNode","Edge","edgeData","weight","AdjacencyMap","nodeMap","source","target","addEdge","addBiEdge","addDiEdge","createMissingNodes","hasSourceAndTarget","addMissingNodes","getEdgeMap","getEdgeMapByNode","removeNode","removeNodeById","edgeMap","Graph","metaData","adjacencyMap","addNodes","nodes","addNewNode","hasSourceAndTargetNodes","getNeighborsById","getEdgeMapById","getNeighborsByNode"],"mappings":"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"}