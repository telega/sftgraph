{"version":3,"file":"index.esm.js","sources":["../src/classes/Node.ts","../src/classes/NodeMap.ts","../src/classes/EdgeMap.ts","../src/classes/Edge.ts","../src/classes/AdjacencyMap.ts","../src/classes/Graph.ts"],"sourcesContent":["import { ObjectId } from 'bson'\nimport { WithId } from '../interfaces/WithId'\n\nexport class Node<T> implements WithId {\n  public readonly _id: ObjectId\n  private nodeData: T\n  constructor(data: T) {\n    this._id = new ObjectId()\n    this.nodeData = data\n  }\n\n  get id() {\n    return this._id.toHexString()\n  }\n\n  get data() {\n    return this.nodeData\n  }\n\n  set data(data: T) {\n    this.nodeData = data\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Node } from './Node'\n\nexport class NodeMap<ND> {\n  public map: Map<ObjectId, Node<ND>>\n\n  constructor() {\n    this.map = new Map<ObjectId, Node<ND>>()\n  }\n\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasNode = (node: Node<ND>) => this.has(node._id)\n\n  public add = (id: ObjectId, node: Node<ND>) => this.map.set(id, node)\n  public addNode = (node: Node<ND>) => !this.hasNode(node) && this.add(node._id, node)\n\n  public getNodeById = (id: ObjectId) => this.map.get(id)\n\n  public values = () => this.map.values()\n  public entries = () => this.map.entries()\n  public clear = () => this.map.clear()\n\n  public get size() {\n    return this.map.size\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Edge } from './Edge'\nimport { Node } from './Node'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport * as _ from 'lodash'\nexport class EdgeMap<ND, ED extends WithWeight> {\n  private map: Map<ObjectId, Edge<ND, ED>> = new Map()\n\n  constructor(edge?: Edge<ND, ED>) {\n    this.map = edge ? new Map<ObjectId, Edge<ND, ED>>([[edge._id, edge]]) : new Map<ObjectId, Edge<ND, ED>>()\n  }\n  get size() {\n    return this.map.size\n  }\n  get length() {\n    return this.map.size\n  }\n  public clear = () => this.map.clear()\n  public entries = () => this.map.entries()\n  public get = (id: ObjectId) => this.map.get(id)\n  public getEdge = ({ _id }: Edge<ND, ED>) => this.get(_id)\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasEdge = ({ _id }: Edge<ND, ED>) => this.has(_id)\n  public forEach = (\n    callbackFn: (value: Edge<ND, ED>, key: ObjectId, map: Map<ObjectId, Edge<ND, ED>>) => void,\n    thisArg?: any\n  ) => this.map.forEach(callbackFn, thisArg)\n  public values = () => this.map.values()\n  public set = (key: ObjectId, value: Edge<ND, ED>) => this.map.set(key, value)\n  public setEdge = (edge: Edge<ND, ED>) => this.set(edge._id, edge)\n\n  public getEdgesByTargetNodeId = (id: ObjectId) =>\n    new Set<Edge<ND, ED>>(_.filter(Object.fromEntries(this.map), (edge: Edge<ND, ED>) => edge.nodeId.equals(id)))\n\n  public removeEdgesByTargetNodeId = (id: ObjectId) => this.removeEdges(this.getEdgesByTargetNodeId(id))\n\n  public removeEdges = (edges: Set<Edge<ND, ED>>) => edges.forEach(({ _id }: Edge<ND, ED>) => this.removeEdgeById(_id))\n  public removeEdgeById = (id: ObjectId) => this.map.delete(id)\n\n  public hasEdgeToTargetNodeId = (id: ObjectId) => this.getEdgesByTargetNodeId(id).size > 0\n  public hasEdgeToTargetNode = ({ _id }: Node<ND>) => this.hasEdgeToTargetNodeId(_id)\n\n  public getTargetNodes = () => Array.from(this.values()).map(edge => edge.targetNode)\n}\n","import { ObjectId } from 'bson'\nimport { WithId } from '../interfaces/WithId'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { Node } from './Node'\n\nexport class Edge<N, D extends WithWeight> implements WithId {\n  public readonly _id: ObjectId\n  public edgeData: D\n  public targetNode: Node<N>\n\n  constructor(node: Node<N>, data: D) {\n    this._id = new ObjectId()\n    this.edgeData = data\n    this.targetNode = node\n  }\n\n  get id() {\n    return this._id.toHexString()\n  }\n\n  get data() {\n    return this.edgeData\n  }\n\n  set data(data: D) {\n    this.edgeData = data\n  }\n\n  get node() {\n    return this.targetNode\n  }\n\n  get nodeId() {\n    return this.targetNode._id\n  }\n\n  get weight() {\n    return this.edgeData.weight\n  }\n\n  set weight(weight: number) {\n    this.edgeData.weight = weight\n  }\n}\n","import { ObjectId } from 'bson'\nimport { EdgeMap } from './EdgeMap'\nimport { Node } from './Node'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { Edge } from './Edge'\n\nexport class AdjacencyMap<ND, ED extends WithWeight> {\n  public map: Map<ObjectId, EdgeMap<ND, ED>>\n\n  constructor(nodeMap: Map<ObjectId, Node<ND>> = new Map<ObjectId, Node<ND>>()) {\n    this.map = new Map<ObjectId, EdgeMap<ND, ED>>()\n    nodeMap.forEach(this.addNode)\n  }\n\n  public has = (id: ObjectId) => this.map.has(id)\n  public hasNode = (node: Node<ND>) => this.has(node._id)\n  public addNode = (node: Node<ND>) => !this.hasNode(node) && this.map.set(node._id, new EdgeMap<ND, ED>())\n\n  public hasEdge = (source: Node<ND>, target: Node<ND>) =>\n    this.hasNode(source) && this.map.get(source._id).hasEdgeToTargetNode(target)\n\n  /** shorthand for add BiEdge */\n  public addEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) => this.addBiEdge(source, target, edgeData)\n  public addBiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.addDiEdge(source, target, edgeData) && this.addDiEdge(target, source, edgeData)\n  public addDiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.map.get(source._id).setEdge(new Edge(target, edgeData))\n\n  private createMissingNodes = (source: Node<ND>, target: Node<ND>) =>\n    this.hasSourceAndTarget(source._id, target._id) || this.addMissingNodes(source, target)\n\n  private addMissingNodes = (source: Node<ND>, target: Node<ND>) => {\n    !this.has(source._id) && this.addNode(source)\n    !this.has(target._id) && this.addNode(target)\n  }\n\n  private hasSourceAndTarget = (source: ObjectId, target: ObjectId) => this.has(source) && this.has(target)\n\n  public getEdgeMap = (id: ObjectId) => this.map.get(id)\n  public getEdgeMapByNode = (node: Node<ND>) => this.getEdgeMap(node._id)\n\n  public values = () => this.map.values()\n  public entries = () => this.map.entries()\n  public clear = () => this.map.clear()\n\n  public removeNode = ({ _id }: Node<ND>) => this.removeNodeById(_id)\n  public removeNodeById = (id: ObjectId) =>\n    this.has(id) && this.map.delete(id) && this.map.forEach(edgeMap => edgeMap.removeEdgesByTargetNodeId(id))\n\n  get size() {\n    return this.map.size\n  }\n}\n","import { ObjectId } from 'bson'\nimport { Edge } from './Edge'\nimport { Node } from './Node'\nimport { EdgeMap } from './EdgeMap'\nimport { WithId } from '../interfaces/WithId'\nimport { WithWeight } from '../interfaces/WithWeight'\nimport { NodeMap } from './NodeMap'\nimport { AdjacencyMap } from './AdjacencyMap'\nexport class Graph<GD, ND, ED extends WithWeight> implements WithId {\n  readonly _id: ObjectId\n  public nodeMap: NodeMap<ND>\n  public adjacencyMap: AdjacencyMap<ND, ED>\n  public metaData: GD\n\n  constructor(metaData?: GD) {\n    this._id = new ObjectId()\n    this.nodeMap = new NodeMap<ND>()\n    this.adjacencyMap = new AdjacencyMap<ND, ED>()\n    this.metaData = metaData\n  }\n\n  public addNode = (node: Node<ND>) => {\n    this.nodeMap.addNode(node)\n    this.adjacencyMap.addNode(node)\n    return node\n  }\n\n  public addNodes = (nodes: Array<Node<ND>>) => nodes.forEach(node => this.addNode(node))\n\n  public addNewNode = (nodeData: ND) => this.addNode(new Node(nodeData))\n\n  public addEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.adjacencyMap.addEdge(source, target, edgeData)\n\n  public addBiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) => this.addEdge(source, target, edgeData)\n\n  public addDiEdge = (source: Node<ND>, target: Node<ND>, edgeData: ED) =>\n    this.createMissingNodes(source, target) && this.adjacencyMap.addDiEdge(source, target, edgeData)\n\n  private createMissingNodes = (source: Node<ND>, target: Node<ND>) =>\n    this.hasSourceAndTargetNodes(source, target) || this.addMissingNodes(source, target)\n\n  private addMissingNodes = (source: Node<ND>, target: Node<ND>) => {\n    !this.hasNode(source) && this.addNode(source)\n    !this.hasNode(target) && this.addNode(target)\n  }\n  private hasSourceAndTargetNodes = (source: Node<ND>, target: Node<ND>) => this.hasNode(source) && this.hasNode(target)\n  public hasNode = (node: Node<ND>) => this.nodeMap.hasNode(node)\n\n  get nodes() {\n    return this.nodeMap.entries()\n  }\n\n  get nodeValues() {\n    return this.nodeMap.values()\n  }\n\n  get size() {\n    return this.nodeMap.size\n  }\n\n  get edgeCount() {\n    return this.adjacencyMap.size\n  }\n\n  getNodeById(id: ObjectId) {\n    return this.nodeMap.getNodeById(id)\n  }\n\n  getEdgeMapById(id: ObjectId) {\n    return this.adjacencyMap.has(id) && this.adjacencyMap.getEdgeMap(id)\n  }\n\n  getEdgeMapByNode(node: Node<ND>) {\n    return this.adjacencyMap.hasNode(node) && this.adjacencyMap.getEdgeMapByNode(node)\n  }\n\n  getNeighborsById = (id: ObjectId) => this.getEdgeMapById(id).getTargetNodes()\n  getNeighborsByNode = (node: Node<ND>) => this.getNeighborsById(node._id)\n}\n"],"names":["Node","constructor","data","_id","nodeData","ObjectId","this","toHexString","NodeMap","map","has","id","hasNode","node","add","set","addNode","getNodeById","get","values","entries","clear","Map","size","EdgeMap","edge","getEdge","hasEdge","forEach","callbackFn","thisArg","key","value","setEdge","getEdgesByTargetNodeId","Set","_","Object","fromEntries","nodeId","equals","removeEdgesByTargetNodeId","removeEdges","edges","removeEdgeById","delete","hasEdgeToTargetNodeId","hasEdgeToTargetNode","getTargetNodes","Array","from","targetNode","Edge","edgeData","weight","AdjacencyMap","nodeMap","source","target","addEdge","addBiEdge","addDiEdge","createMissingNodes","hasSourceAndTarget","addMissingNodes","getEdgeMap","getEdgeMapByNode","removeNode","removeNodeById","edgeMap","Graph","metaData","adjacencyMap","addNodes","nodes","addNewNode","hasSourceAndTargetNodes","getNeighborsById","getEdgeMapById","getNeighborsByNode"],"mappings":"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"}